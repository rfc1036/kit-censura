#!/bin/bash

source config.sh

# override the list of target servers
if [ "$1" ]; then
  SERVERS="$1"
fi

##############################################################################
copy_config() {
  local file="$1"
  local server rc

  rc=0
  for server in $SERVERS; do
    dprintf "Copying to $server..."
    
    for zone in $LISTS; do
    
      if [ -e db.$zone ] ; then  
         if rsync $RSYNC_OPTIONS db.$zone $server:$CONFDIR; then 
          dprintf "The zone db.$zone has been correctly copied to $CONFDIR on $server" >&2
        else
          dprintf "ERROR: the zone db.$zone has not been correctly copied to $server!" >&2
        fi
      fi
    done

    
    
    if rsync $RSYNC_OPTIONS $file $server:$CONFFILE; then
      dprintf "Succesfully copied $file to $CONFFILE on $server."
      
      if ssh $server "named-checkconf $CONFFILE && rndc reconfig"; then
        dprintf "Configuration successfully reloaded on $server."
      else
        dprintf "ERROR: the configuration has not been correctly reloaded on $server!" >&2
	rc=1
      fi
    else
      dprintf "ERROR: the configuration has not been correctly copied to $server!" >&2
      rc=1
    fi
  done

  return $rc
}

#if [ -t 0 ]; then VERBOSE=1; fi

dprintf() {
#  [ "$VERBOSE" ] || return 0
  printf "$* \n"
  test $LOGGING_ENABLE == true && echo "$(date '+%d/%m/%y %H:%M:%S') - $*" >> $LOGFILE
}

##############################################################################
# debugging
if [ "$PWD" = "/home/md/projects/kit-censura" ]; then
  rsync() { echo "DEBUG: rsync $*"; }
  ssh() { echo "DEBUG: ssh $*"; }
fi

##############################################################################
if cmp -s $CONF $CONF.new; then
  # the new config file is unchanged, we are done
  dprintf "$CONF is unchanged, exiting."
  exit 0
fi

dprintf "$CONF has changed."


# copy named.conf to the servers
# rename the file only if everything was successful
if copy_config $CONF.new; then
  cp -a $CONF.new $CONF
else
  rm -f $CONF.new
fi

exit 0

